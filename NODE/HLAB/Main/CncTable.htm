
<!DOCTYPE html>
<html>
	<head>
		<title>CNC Table</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link href="http://localhost:8000/System.default.css" rel="stylesheet" type="text/css"/>
		<script src="http://localhost:8000/Utils.js" type="text/javascript"></script>
		<script src="http://localhost:8000/DOM.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Events.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Log.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Url.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Ajax.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Jasp.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Modules.js" type="text/javascript"></script>
		<script src="http://localhost:8000/ui.js" type="text/javascript"></script>
		<script src="http://localhost:8000/Net.js" type="text/javascript"></script>
		<script src="/socket.io/socket.io.js" type="text/javascript"></script>
		
		<script type='text/javascript'>
			Notify = {};
			
			log = function (message, dt) {
				if (!dt) dt = (new Date());
				var nf = DOM("#Notify");
				var ev = nf.div(".event.first", dt.formatTime() + " " + message);
				nf.show();
				nf.ins(ev);
				Notify.setTimeout();
			};
			
			error = function (error) {
				var nf = DOM("#Notify");
				var ev = nf.div(".event.error.first", (new Date()).formatTime() + " " + error);
				nf.show();
				nf.ins(ev);
				Notify.setTimeout();
			};
			
			Notify.setTimeout = function () {
				if (Notify.timeout) {
					window.clearTimeout(Notify.timeout);
				}
				Notify.timeout = window.setTimeout(Notify.clearFirst, 3000);
			};
			
			Notify.clearFirst = function () {
				DOM.all("#Notify .event.first").del(".first");
			};
			
			CNC = {};
			
			CNC.Init = function(){
				socket = io.connect("http://" + window.location.host);
				socket.on('device-message', CNC.DeviceMessage);
				tunnel = KLabNet.GetTunnel();
				CNC.GetLogs();
				logDiv = DOM("#LogBar");
				CNC.startDate = new Date();
				CNC.State = DOM("#State");
				CNC.State.AttrInnerProperty("X", ".x-coord");
				CNC.State.AttrInnerProperty("Y", ".y-coord");
			};
			
			CNC.Commands = ["Unkn", "Go", "Rebase", "Stop", "Info"];
			CNC.GCommands = { "G" : 1, "S" : 3, "R" : 2};
			
			CNC.DeviceMessage = function(data){
				//data = JSON.stringify(data);
				if (typeof(data) == 'object'){
					var comm = CNC.Commands[data.command];
					log(comm + " X:" + data.xSteps + " Y:" + data.ySteps);
					CNC.State.X = data.xSteps;
					CNC.State.Y = data.ySteps;
					lx = data.xSteps;
					ly = data.ySteps;
					WS.Body.del(".busy");
				}
				else{
					log(data);
				}
			};
			
			CNC.GetCircleProg = function(res, x, y, r){
				for (var angle = 0; angle <= 2 * Math.PI; angle += Math.PI/32){
					var xcoord = Math.round(r * Math.cos(angle)) + x;
					var ycoord = Math.round(r * Math.sin(angle)) + y;
					var obj = { command : CNC.GCommands["G"], x : xcoord, y: ycoord, speed : 0 };
					res.push(obj);
				}
			};
			
			CNC.GetLoopProg = function(res, loop, comms, lx, ly){
				if (!loop || !comms || comms.length <= 0) return;
				loop = loop.split(" ");
				var start = parseInt(loop[1]);
				var stop = parseInt(loop[2]);
				var step = parseInt(loop[3]);
				if (isNaN(step)) step = 1;
				for (var i = start; i <= stop; i+=step){
					for (var j = 0; j < comms.length; j++){
						if (res[res.length - 1]){
							lx = res[res.length - 1].x;
							ly = res[res.length - 1].y;
						}
						var txt = comms[j].split(" ");
						if (txt[0] == "C"){
							CNC.GetCircleProg(res, parseParam(txt[1], i, lx), parseParam(txt[2], i, ly), parseParam(txt[3], i), txt[4]);
							continue;
						}
						//var speed = 0x1015;
						var speed = 0;
						if (txt[3]) speed = parseParam(txt[3], i);
						var obj = { command : CNC.GCommands[txt[0]], x : parseParam(txt[1], i, lx), y: parseParam(txt[2], i, ly), speed : speed};
						res.push(obj);
					}
				}
			};
			
			parseParam = function(param, i, last){
				if (!param || param == "") return null;
				if (!param.start("+") && !param.start("-")){
					last = null;
				}
				else{
					if (param.start("-")) var sign = -1;
					else var sign = 1;
					param = param.substring(1);
				}
				var int = parseInt(param);
				if (!isNaN(int)) {
					if (last){
						int = last + sign * int;
					}
					return int;
				}
				if (param.search(/\(\d+\)/) == 0){
					var paramNum = parseInt(param.match(/\d+/)[0]);
					var int = parseInt(i);
					if (!isNaN(int)) {
						if (last){
							int = last + sign * int;
						}
						return int;
					}
					return i;
				}
			};
				
			parseNum = function(param, param1, param2, param3){
				if (!param || param == "") return null;
				var int = parseInt(param);
				if (!isNaN(int)) return int;
				if (param.search(/\(\d+\)/) == 0){
					var paramNum = parseInt(param.match(/\d+/)[0]);
					return arguments[paramNum + 1];
				}
			};
			
			CNC.RunProg = function(){
				var text = DOM("#programText").value;
				text = text.split("\n");
				var result = [];
				try{
					for (var i = 0; i < text.length; i++){
						if (result[result.length - 1]){
							lx = result[result.length - 1].x;
							ly = result[result.length - 1].y;
						}
						if (text[i].length == 0) break;
						var txt = text[i].split(" ");
						if (txt[0] == "C"){
							CNC.GetCircleProg(result, parseInt(txt[1]), parseInt(txt[2]), parseInt(txt[3]), txt[4]);
							continue;
						}
						if (txt[0] == "L"){
							var comms = [];
							for (var j = i + 1; j < text.length; j++){
								if (text[j]) {
									if (text[j] == "LF") break;
									comms.push(text[j]);
								}
								else {
									j = j - 1;
									break;
								}
							}
							if (comms.length > 0){
								CNC.GetLoopProg(result, text[i], comms, lx, ly);
								i = j;
							}
							continue;
						}
						{
							var speed = 0;
							if (txt[3]) speed = txt[3];
							var obj = { command : CNC.GCommands[txt[0]], x : parseParam(txt[1], 0, lx), y: parseParam(txt[2], 0, ly), speed : txt[3] };
							result.push(obj);
						}
					}
					socket.emit('program', result);
				}
				catch(e){
					DOM("#StatusBar").set(null, e);	
				}
			};
			
			CNC.Go = function(x, y){
				socket.emit('program', [{ command : 1, x : x, y: y, speed : 3000}]);
			};
			
			CNC.Rebase = function(x, y){
				socket.emit('program', [{ command : 2, x : x, y: y, speed : 0}]);
			};
			
			
			CNC.GetState = function(){
				WS.Body.add(".busy");
				socket.emit('state', {});
			};
			
			
			CNC.Stop = function(){
				WS.Body.add(".busy");
				socket.emit('stop',  {});
			};
			
			CNC.GetLogs = function(){
				if (CNC.lastpoll){
					tunnel.all('/logs/?date={"$gt":' + CNC.lastpoll + '}', CNC.LogsReady);
				}
				else{
					tunnel.all("/logs/*", CNC.LogsReady);	
				}
			};
			
			CNC.LogsReady = function(result){
				result = JSON.parse(result);
				var lastdate = 0;
				for (var i = 0; i < result.length; i++){
					CNC.AddLog(result[i]);
					if (result[i].date > lastdate) lastdate = result[i].date;
				}
				if (lastdate > 0) CNC.lastpoll = lastdate;
				window.setTimeout(CNC.GetLogs, 1000);
			};
			
			CNC.FormatError = function(error){
				try{
					if (typeof (error) != "object") {
						error = JSON.parse(error);
					}
					var errorDiv = DOM.div();
					var stack = error.stack.split('\n');
					for (var i = 0; i < stack.length; i++){
						var line = stack[i];
						line = line.replace(/</g, "&lt;").replace(/>/g, "&gt;");
						line = line.replace(/\s?at\s/, "");
						var sl = errorDiv.div(".stack-line");
						var iofaddr = line.indexOf("(");
						if (iofaddr >= 0){
							line = line.replace(/\((\w):\\/, "($1\\");
							var mod = /\(([^:]+):(\d+):(\d+)\)/.exec(line);
							line = line.substr(0, iofaddr);
							sl.div(".module-name.stack-part.stack-part-prefix", mod[1] + " : " + mod[2] + "(" + mod[3] + ")");
							//sl.div(".row.stack-part.stack-part-prefix", mod[2] + "(" + mod[3] + ")");
							//sl.div(".col.stack-part.stack-part-prefix", mod[3]);
							sl.div(".function.stack-part", line);
						}
						else{
							sl.set(null, line);
						}
					}
				}
				catch (ex){
					return "Error parsing object: " + error;
				}
				return errorDiv.innerHTML;
			};
			
			
			CNC.AddLog = function(message){
				var dateOfLog = new Date(message.date);
				var logType = message.type;
				var text = message.text ? message.text : (message.message ? message.message : JSON.stringify(message));
				var newLogDiv = DOM.div('.log-item.' + logType);
				if (dateOfLog < CNC.startDate) newLogDiv.add(".old");
				newLogDiv.div(".datetime", dateOfLog.formatTime());
				if (logType == "error"){
					text = CNC.FormatError(text);
				}
				newLogDiv.div(".message", text);
				if (logDiv.firstChild){
					logDiv.ins(newLogDiv);
				}
				else{
					logDiv.add(newLogDiv);
				}
			};
			
			
			
			WS.DOMload(CNC.Init); 
		</script>
		<style type='text/css'>
			
			#Notify{
				background-color: white;
				border: 1px solid navy;
				border-radius: 10px 10px 10px 10px;
				cursor: default;
				font-size: 16px;
				height: 100%;
				text-align: left;
				width: 12%;
				padding: 7px;
				font-size: 12px;
				float: right;
			}
			
			#Notify .event{
				color: #333;
			}
			
			#Notify .event.first{
				background-color:yellow;
			}
			
			#Notify .event.error{
				color: red;
			}
			
			
			#ContentPanel{
				width: 80%;	
				height: 90%;
				float: left;
			}
			
			#LogBar {
				display: block;
				font-family: monospace;
				font-size: 12px;
				padding: 2px;
				text-align: left;
				width: 50%;
				height: 100%;
				overflow-y: scroll;
				float: left;
			}
			#LogBar .log-item {
				clear: both;
			}
			#LogBar .log-item.old:first-child {
				margin-top: 10px;
			}
			#LogBar .log-item.old {
				color: #666666;
			}
			#LogBar .log-item div {
				float: left;
				padding-left: 10px;
			}
			#LogBar .log-item.error .datetime {
				color: red;
			}
			#LogBar .log-item.error .message .stack-line:first-child {
				color: red;
			}
			#LogBar .log-item.error .stack-line {
				clear: both;
				float: none;
			}
			#LogBar .log-item.error .stack-line .stack-part-prefix {
				text-align: left;
				width: 150px;
			}
			
			#State
			{
				float: right;
				font-size: 45px;
				margin-right: 30px;
			}
			
			#State .coord
			{
				color: green;
			}
			
			#State .y-coord
			{
				color: violet;
			}
			
			#Program{
				width: 49%;				
				height: 100%;
				float: left;
				border: solid 1px gray;
			}
			
			
			#Program textarea{
				width: 100%;
				height: 100%;
				border: none;
			}
			
			body.busy .menuitem{
				display: none;
			}
		</style>
	</head>
	<body class="">
		<include url='http://Services.web-manufacture.net/UI/Toolbars.htm'></include>
		<div id='ContentPanel'>
			<div id='Toolbar' class='toolbar'>
				<div class='menuitem' onclick="CNC.RunProg()">RUN</div>
				<div class='menuitem' onclick="CNC.GetState()">STATE</div>
				<div class='menuitem' onclick="CNC.Stop()">STOP!</div>
				
				<div class='separator'></div>
				<div class='menuitem' onclick="CNC.Go(0, 0)">G 0,0</div>
				<div class='menuitem' onclick="CNC.Rebase(0, 0)">R 0,0</div>
				<div id='State'>
					x&nbsp;&nbsp;<span class='x-coord coord'></span>&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;<span class='y-coord coord'></span>
				</div>
			</div>
			<div id='Program'>
				
				<div id='StatusBar'></div>
				<textarea id='programText'></textarea>
			</div>
			<div id='LogBar'></div>
		</div>
		<div id='Notify'></div>
	</body>
</html>