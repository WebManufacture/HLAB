<!DOCTYPE html>
<head>
	
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
	<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.5?join=true"></script>
	
	<link href="http://services.web-manufacture.net/Styles/System.default.css" rel="stylesheet">
	<title>STM8 PROJECTS</title>
	
	<script type="text/javascript">
		M.ServicesUrl = "http://services.web-manufacture.net";
		M.ModulesUrl = "http://modules.web-manufacture.net";
		M.SystemUrl = "http://system.web-mnanufacture.net";
		
		
		WS.DOMload(function(){
			WS.Body.ondragover = function(event) {
				var types = event.dataTransfer.types;
				if (types[2] && types[2] == "Files"){ event.preventDefault(); return true; }
				return false;
			};	
			
			function upload(file){
				Notify.Show("Uploading " + file.name + "");
				var xhr = new XMLHttpRequest();
				xhr.open('POST',  window.location + "/" + file.name, true);
				xhr.onload = function(e) { Notify.Show("file " + file.name + " uploaded!"); };
				xhr.send(file);
			}
			
			WS.Body.ondrop = function(event) {
				var types = event.dataTransfer.types;
				var files = event.dataTransfer.files;
				if (types && types.length && (types[0] == "Files" || types[0] == "application/x-moz-file") && files && files.length > 0){ 
					event.preventDefault(); 
					for (var i = 0; i < files.length; i++){
						upload(files[i]);
					}
					return true; 
				}
				return false;
			};
		})
		
		Notify = {};
		
		Notify.Show = function (message, cls) {
			var nf = DOM("#Notify");
			if (!cls) cls = "";
			var ev = nf.tag("pre", ".event" + cls, (new Date()).formatTime() + " " + message);
			nf.show();
			nf.ins(ev);
			Notify.setTimeout();
			return ev;
		};
		
		Notify.Error = function (error, cls) {
			var nf = DOM("#Notify");
			if (!cls) cls = "";
			var ev = nf.tag("pre",".event.error" + cls, (new Date()).formatTime() + " " + error);
			nf.show();
			nf.ins(ev);
			Notify.setTimeout();
			return ev;
		};
		
		Notify.Line = Notify.Info = function (txt, cls) {
			var nf = DOM("#Notify");
			if (!cls) cls = "";
			var ev = nf.tag("pre",".info" + cls);
			ev.textContent = txt;
			nf.show();
			nf.ins(ev);
			Notify.setTimeout();
			return ev;
		};
		
		Notify.Clear = function (error) {
			var nf = DOM("#Notify");
			nf.clear();
		};
		
		Notify.setTimeout = function () {
			if (Notify.timeout) {
				window.clearTimeout(Notify.timeout);
			}
			Notify.timeout = window.setTimeout(Notify.clearFirst, 3000);
		};
		
		Notify.clearFirst = function () {
			DOM.all("#Notify .event.first").del(".first");
		};
		
		Dialog = {};
		
		Dialog.Apply = function(elem){
			var dialog = elem.findParent(".dialog");
			dialog.hide();
			var value = dialog.get(".dialog-value");
			if (Check(dialog.onapply)){
				dialog.onapply(value.value);
			}
		};
		
		Dialog.Close = function(elem){
			var dialog = elem.findParent(".dialog");
			dialog.hide();
		};
		
		FS = {};
		
		FS.Init = function() {
			FS.Loaded = false;
			FS.Tree = DOM.get(".files-block .tree-container");
			FS.InputField = DOM("#FilterInput");
			FS.InputField.onkeyup = FS.SearchFile;
			//Drag.NoBodyDrop = true;
			FS.server = Net.GetTunnel();
			FS.CurrentDir = window.location.pathname.replace(/\/\//g, "/");
			FS.ReloadSystem();
			
			Events.on("onmoduleregistered", "http://services.web-manufacture.net/ui/toolbars.htm", function(module){
				var sb = DOM(".spien-bar");
				if (sb){
					sb.del();
				}
			});
		};
		
		FS.ReloadSystem = function() {
			FS.Loaded = false;
			LoadingMask.show();
			FS.server.browse(new Url(".." + FS.CurrentDir) + "", FS.LoadTreeComplete);			
		};
		
		FS.GetActiveFiles = function() {
			return FS.Tree.all(".selected");
		};
		
		FS.LoadTreeComplete = function(files, status) {
			if (status == 200){
				if (typeof files == 'string'){
					files = JSON.parse(files);
				}
				FS.Tree.clear();
				if (FS.CurrentDir != "/"){
					var fname = "..";
					var file = FS.Tree.div();
					file.div(".name", fname);
					file.fileType = "link";
					file.fileName = fname;
					FS.InitDirElement(file);
				}
				for (var i = 0; i < files.length; i++) {
					if (files[i].fileType == "directory"){
						var fname = files[i].name;
						var file = FS.Tree.div();
						file.fileName = fname;
						file.fileType = "directory";
						FS.InitDirElement(file);
					}
				}
				for (var i = 0; i < files.length; i++) {
					if (files[i].fileType == "file"){
						var fname = files[i].name;
						var file = FS.Tree.div();
						file.fileName = fname;
						file.fileType = "file";
						FS.InitFileElement(file);
					}
				}
				FS.Loaded = true;
				
				var pfile = FS.Tree.get(".file.json[name=project]");
				if (pfile){					
					DOM("#create-project-button").hide();
					DOM("#compile-project-button").show();
					FS.server.get(new Url(".." + FS.CurrentDir) + "/project.json", FS.ProjectConfigLoaded);			
				}
				else{
					DOM("#create-project-button").show();
					DOM("#compile-project-button").hide();
				}
				
				LoadingMask.hide();
			}
			else{
				Notify.Error("Browse aborted");
			}
		};
		
		FS.InitFileElement = function(elem) {
			var fileName = elem.fileName;// = elem.innerHTML;
			elem.add(".file");			
			var nameDiv = elem.div(".name", fileName);
			var splt = fileName.split(".");
			if (splt.length < 2){
				splt.push("unknown");	
			}
			elem.ext = splt[splt.length-1];
			elem.cls(elem.ext);
			elem.attr("ext", elem.ext);
			var name = elem.name = fileName.replace("." + elem.ext, "");
			elem.add('@name', name.toLowerCase());
			FS.InitExt(elem);
			elem.onclick = FS.FileClick;
			elem.ondblclick = FS.FileActivate;
			//Drag.MakeDraggable(elem);
		};
		
		FS.InitDirElement = function(elem) {
			var fileName = elem.name = elem.fileName;// = elem.innerHTML;
			elem.div(".name").textContent = fileName;
			if (elem.fileType == "link"){
				elem.add(".link");	
				if (elem.name == "."){
					elem.add(".top");		
				}
				if (elem.name == ".."){
					elem.add(".back");		
				}
				elem.ondblclick = FS.DirActivate;
				
			}
			else{
				elem.add(".dir");	
				elem.onclick = FS.DirClick;
				elem.ondblclick = FS.DirActivate;
				elem.touchmove = FS.DirActivate;
			}
			elem.add('@name', fileName.toLowerCase());
			//Drag.MakeDraggable(elem);
		};
		
		FS.InitExt = function(elem){
			var ext = DOM.div('.tag', '' + elem.ext);
			ext.parent = elem;
			ext.onclick = FS.SortTag;
			elem.add(ext);
		};
		
		FS.SortTag = function(event){
			FS.Tree.all('.file:not([ext=' +this.parent.ext + '])').hide();
			event.stopPropagation();
		};
		
		FS.ClearTagFilter = function(){
			FS.InputField.value='';
			FS.Tree.all('.file').show();
		};
		
		FS.NewFileReturned = function(result) {
			if (this.responseText == "Error!" || result == "Error!") {
				Notify.Error("Error!");
				return;
			}
			var files = W.Wrap(this.responseText);
			if (files.has("tag")) {
				FileSystem.InitTagElement(files);
			}
			Notify.Show("<h4>Добавлены файлы:<h4>" + result);
		};	
		
		
		FS.FileClick = function(event) {
			if (event.shiftKey) {
				this.add(".selected");
				return;
			}
			//this.toggle("selected");
			FS._toggle(this, 'selected');
		};
		
		FS.DirClick = function(event) {
			if (event.shiftKey) {
				this.add(".selected");
				return;
			}
			if (event.ctrlKey) {	
				if (location.pathname == "/"){
					window.open(location + this.name);
				}
				else{
					window.open(location + "/" + this.name);
				}
				return;
			}
			FS._toggle(this, 'selected');
		};
		
		FS.DirActivate = function(event) {
			if (this.is(".link")){
				if (this.is(".back")){
					var parts = FS.CurrentDir.split("/");
					FS.CurrentDir = "";
					for (var i = 0; i < parts.length - 1; i++){
						if (parts[i] != ""){
							FS.CurrentDir += "/" + parts[i];
						}
					}
					if (FS.CurrentDir == "") FS.CurrentDir = "/";
				}
				if (this.is(".top")){
					FS.CurrentDir = "/";
				}
			}
			if (this.is(".dir")){
				if (FS.CurrentDir == "/") FS.CurrentDir = "";
				FS.CurrentDir += "/" + this.name;				
			}	
			history.pushState(null, FS.CurrentDir, FS.CurrentDir);
			//location.pathname = FS.CurrentDir;
			FS.ReloadSystem();
		};
		
		FS._toggle = function(elem, toggledclass){
			if (elem.is('.' + toggledclass)){
				elem.del('.' + toggledclass);
			}else{
				elem.add('.' + toggledclass);
			};
		};
		
		FS.ClearSelect = function(){
			FS.Tree.all('.file').del('.selected');
		};
		
		FS.FileActivate = function() {
			FS.LoadFile(this);
			this.del('.selected');
		};
		
		FS.LoadFile = function(file) {
			var url = location + file.fileName;
			if (location.pathname != "/"){
				url = location + "/" + file.fileName;
			}
			//if (file.is(".css") || file.is(".htm") || file.is(".html") || file.is(".js") || file.is(".cs") || file.is() {
				url += "?action=edit";
			//}
			window.open(url);
		};
		
		FS.DeleteDocs = function() {
			var elements = FS.GetActiveFiles();
			
			if (!elements.length) {
				alert('Нет выбранных файлов');
				return;
			};
			
			var confirmString = ' файлов';
			if(elements.length == 1) confirmString = ' файл';
			if(elements.length > 1 && elements.length < 5) confirmString =  'файла';
			
			if(confirm('Вы действительно хотите удалить ' + (elements.length) + confirmString + '?')){
				for(var i = 0; i < elements.length; i++){
					FS.DeleteDoc(elements[i]);
				}
			};			
		};
		
		FS.DeleteDoc = function(element) {
			Net.Del(window.location.href + "/" + element.fileName, function(message){
				Notify.info(message);
				element.del();
			});			
		};
		
		FS.SearchFile = function(){
			var text = FS.InputField.value;
			text = text.trim("\n");
			text = text.trim(" ");
			text = text.replace("<br/>", "");
			text = text.replace("<br>", "");
			if (text.length > 0){
				var files = FS.Tree.all(".file");
				files.hide();
				files = FS.Tree.all(".file[name*='" + text.toLowerCase() + "']");
				files.show();
			}
			else{
				var files = FS.Tree.all(".file");
				files.show();
				FS.InputField.value = "";
			};
		};
		
		FS.LogResult = function() {
			Notify.Show(this.responseText);
		};
		
		FS.ProjectConfigLoaded = function(config) {
			ProjectName = config.name;
			ProjectTitle = config.title;
			document.title = config.title;
		};
		
		FS.BuildProject = function() {
			Notify.Clear();
			LoadingMask.show();
			console.log("Compiling:" + FS.CurrentDir);
			CompilerHelper.Compile(FS.CurrentDir, function(result, obj){
				console.log(obj);
				if (obj.errCode > 0){
					Notify.Error("Compiling errors:");
					for (var i = 0; i < obj.errFiles.length; i++){
						if (obj.errFiles[i]){
							var line = Notify.Line(obj.errFiles[i], ".link");
							line.set("@url", "/" + obj.errFiles[i]);
							line.onclick = (function(){
								Net.get(this.get("@url"), null, function(result){
									Notify.Info(result);
								});
							})
						}
					}
				}
				else{						
					Notify.Show("Compiled successfully!", ".positive");
					for (var i = 0; i < obj.lstFiles.length; i++){
						if (obj.lstFiles[i]){
							var line = Notify.Line(obj.lstFiles[i], ".link");
							line.set("@url", "/" + obj.lstFiles[i]);
							line.onclick = (function(){
								window.open(this.get("@url"));
							});
						}
					}
				}
				LoadingMask.hide();
				LoadingMask.show();
				console.log("Linking:" + FS.CurrentDir);
				CompilerHelper.Link(FS.CurrentDir, function(result, obj){
					console.log(obj);
					if (obj.errCode > 0){
						Notify.Error("Linking errors:");
						Notify.Line(obj.errOut);
					}
					else{						
						Notify.Show("Linked successfully!", ".positive");
						for (var i = 0; i < obj.lstFiles.length; i++){
							if (obj.lstFiles[i]){
								var line = Notify.Line(obj.lstFiles[i], ".link");
								line.set("@url", "/" + obj.lstFiles[i]);
								line.onclick = (function(){
									window.open(this.get("@url"));
								})
							}
						}
						for (var i = 0; i < obj.objFiles.length; i++){
							if (obj.objFiles[i]){
								var line = Notify.Line(obj.objFiles[i], ".link");
								line.set("@url", "/" + obj.lstFiles[i]);
								line.onclick = (function(){
									window.open(this.get("@url"));
								});
							}
						}
					}
					LoadingMask.hide();
				});
			});		
		};
		
		
		FS.CreateNewDoc = function() {
			var fileName = FS.InputField.value;
			var cpath = location.href;
			if (!cpath.ends('/')) cpath += "/" 
			if(fileName.length > 0){
				if (fileName.lastIndexOf(".") > 0){
					var file = FS.Tree.div('.File');
					//file.div(".name", fileName);
					file.fileName = fileName;
					file.attr("ext",fileName.substr(fileName.lastIndexOf(".") + 1));
					FS.InitFileElement(file);
					Notify.Show(file.fileName + " file created");
					window.open(cpath + fileName + "?action=create");
				}
				else{
					Net.get(cpath + fileName + "?action=dir", "", function(){
						location.href = cpath + fileName;						
					})

				}
			};
		};
		
		WS.DOMload(FS.Init); 
		
		
	</script>
	
	<style type="text/css">
		
		#Notify{
			background-color: white;
			border-left: 1px solid gray;
			cursor: default;
			font-size: 12px;
			height: 86%;
			overflow: hidden;
			padding: 7px;
			position: fixed;
			right: 0;
			text-align: left;
			top: 12%;
			width: 45%;
			z-index: 20;
		}
		
		#Notify .event.positive{
			color: green;
		}
		
		#Notify .event{
			color: #333;
		}
		
		#Notify .info{
			color: #333;
		}
		
		#Notify .link:hover{
			text-decoration: underline;
			cursor: pointer;
		}
		
		#Notify .event.first{
			background-color:yellow;
		}
		
		#Notify .event.error{
			color: red;
		}
		
		#LoadingMask{
			position: fixed;
			z-index: 1000;
			width: 100%;
			height: 100%;
			background-color: rgba(80,80,80,0.3);
		}
		
		#LoadingMask .loading-text{
			background-color: white;
			border: 1px solid black;
			border-radius: 5px;
			color: navy;
			font-family: verdana;
			font-size: 20px;
			left: 45%;
			padding: 30px 0;
			position: absolute;
			text-align: center;
			top: 33%;
			width: 170px;
		}
		
		#FilterBlock{
			width: 250px;
			float: left;
			margin-left: 10px;
		}
		
		#FilterBlock #FilterInput{
			
		}
		
		#HeaderBar.toolbar{
			text-align: left;
		}
		
		.search-elem {
			width: 150px;
			height: 25px;
			border: solid 1px #3366FF;
			float: left;
			height: 25px;
			margin-top: 13px;
			text-align: left;
			width: 150px;    
		}
		
		.window.files-block{
			height: 400px;
		}
		
		.window .files-block{
			margin-top: 0px;
			height: 100%;
			width: 100%;
		}
		
		.window .tree-container {
			padding-left: 5px;
			padding-right: 10px;
			height: 100%;
			width: 100%;
			overflow-y : scroll;
		}
		
		.tree-container
		{
			position: relative;
			margin-top: 10px;
			padding-left: 5px;
			padding-right: 100px;
			box-sizing: border-box;
			max-width: 600px;
			-moz-box-sizing: border-box;
		}
		
		
		.filter
		{
			color: #9900FF;
			margin: 5px 10px 10px 5px;
			display: block;
			float: left;
		}
		
		.filter.active
		{
			background-color: #CCFF33;
		}
		
		.tree-container .file, .dir, .link
		{
			color: gray;
			display: block;
			clear: both;
			padding-left: 50px;
			padding-top: 5px;
			padding-bottom: 5px;
			cursor: pointer;
		}
		
		.link.back{
			background-image: url("http://cdn1.iconfinder.com/data/icons/customicondesignoffice5/24/go-back.png");
    		background-position: 20px center;
    		background-repeat: no-repeat;
		}
		
		.dir{
			background-image: url("http://cdn1.iconfinder.com/data/icons/momenticons-basic/16x16/folderopen1.png");
    		background-position: 20px center;
    		background-repeat: no-repeat;
			
		}
		/*
		.dir[name="errors"],
		.dir[name="result"]
		{
			display: none;
		}*/
		
		.file.json[name="project"]
		{
			display: none;
		}
		
		
		
		.tree-container .tag
		{
			color: #3366AA;
			display: inline;
			float: right;
		}
		
		.tree-container .file.htm, .tree-container .file.html
		{
			color: navy;
		}
		
		.tree-container .file.css
		{
			color: #FF00CC;
		}
		
		.tree-container .file.js
		{
			color: #007766;
		}
		
		.tree-container .file.ERROR
		{
			background-color: #FF7766;
		}
		
		.files-block
		{
			display: block;
		}
		
		.tree-container .file.selected, .dir.selected
		{
			background-color: #EEE;
		}
		
		
		.tree-container .file.drop-ready
		{
			border: dotted 1px gray;
			border-radius : 4px;
			-moz-border-radius : 4px;
		}
		
		.tree-container .file.drop-selected
		{
			border: solid 1px gray;
			background-color: #CCFFFF;
		}  
		
		.tree-container .file:hover, .dir:hover, .link:hover
		{
			text-shadow: 1px 1px 1px #ccc;
			border-bottom: dotted 1px gray;
			color: red; 
		}
		
		
		.tree-container .file .name, .dir .name, .link .name
		{
			display: inline;
			color: inherit;
			text-decoration: none;
		}
		
		.tree-container .file .tags, .dir .tags{
			float: right;
		}
		
		.upload-frame
		{
			border: none;
			height: 40px;
			width: 300px;
		}
		
		#NewDocDialogInner
		{
			width: 300px;
			height: 200px;
		}
	</style>
</head>
<body>
	<include url='http://services.web-manufacture.net/UI/toolbars.htm'></include>
	<include url='http://services.web-manufacture.net/Authentication/Authentication.htm'></include>
	<include url='http://klab.web-manufacture.net/HLAB/modules/CompilerHelper.js'></include>
	<div class='toolbar' id='HeaderBar'>
		<div id='FilterBlock'>
			<div class='title'>Фильтр и поиск:</div>
			<input id="FilterInput" type='text'/>
		</div>
		<div class='menuitem file-manager-button' id='create-file-button' icon="http://system.web-manufacture.net/images/document-small.png" onclick="FS.CreateNewDoc()">
			Создать
		</div>
		<div class='menuitem file-manager-button' id='delete-file' icon="http://system.web-manufacture.net/images/delete-mini.png" onclick="FS.DeleteDocs()">
			Удалить
		</div>
		<div class="menuitem round" icon="http://system.web-manufacture.net/images/ButtonUSSR.png" onclick="FS.ClearTagFilter();">
			Отменить фильтрацию
		</div>
		<div class="menuitem round" icon="" onclick="FS.ClearSelect();">
			Убрать выделение
		</div>
		<div class='separator'>
			
		</div>
		
		<div class='menuitem' id='create-project-button' icon="http://system.web-manufacture.net/images/document-small.png" onclick="FS.CreateProject()">
			Создать проект
		</div>
		
		<div class='menuitem' id='compile-project-button' icon="http://system.web-manufacture.net/Images/emblem-system.png" onclick="FS.BuildProject()">
			Собрать
		</div>
	</div> 
	
	<div id="Notify" class=''>
		<div class="event info">Вы можете перетащить сюда файлы для загрузки в данную папку.</div>
		<br/>
		<div class="event info">Для того чтобы добавить файл, введите его имя в поле в верхнем левом углу и нажмите "Создать"</div>
		<br/>
		<div class="event info">Чтобы открыть файл, дважды кликните по нему</div>
		<br/>
		<div class="event info">Скомпилировать проект, можно кнопочкой "Собрать", вверху</div>
	</div>
	<div id="files-block" class="files-block" title="File System">
		<div id='LoadingMask'>
			<div class='loading-text'>Loading...</div>
		</div>
		<div class="tree-container">
			
		</div>  
		<div class="edit-name-dialog dialog">
			<div class="dialog-inner" id="NewDocDialogInner">
				<input id="txtFileName" class="file-name dialog-value" value="" type="text"><br>
				<div id="btnApply" class="button dialog-apply" onclick="Dialog.Apply(this)">
					Принять</div>
				<div id="btnCancel" class="button dialog-close" onclick="Dialog.Close(this)">
					Отменить</div>
			</div>
		</div>
		<div id="LoadDocDialog" class="dialog">
			<div class="dialog-inner">
				<input id="fileUploader" multiple="multiple" type="file">
				<button type="button" id="btnApply" class="dialog-apply">
					Принять</button>
				<button type="button" id="btnCancel" class="dialog-close">
					Отменить</button>
			</div>
		</div>
		
	</div>
	
</body>