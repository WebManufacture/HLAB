<!DOCTYPE html>
<html>
	<head>
		<title>RoboMind control</title>
		<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
		<link type='text/css' rel='stylesheet' href="http://services.web-manufacture.net/Styles/System.default.css" />
		<link type='text/css' rel='stylesheet' href="Index.css" />
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Utils.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/DOM.js"></script>	
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Events.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Log.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Url.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Jasp.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Net.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/Modules.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.4/ui.js"></script>

		<script type='text/javascript' src='http://services.web-manufacture.net/SysUtils/NodeEnvironment.js'>		</script>
		<script type='text/javascript' src='http://modules.web-manufacture.net/Channels.js'>		</script>
		<script type='text/javascript' src='http://modules.web-manufacture.net/Async.js'>		</script>

		<script src="/socket.io/socket.io.js"></script>

		<script type='text/javascript' src='Uart.js'>		</script>
		<script type='text/javascript' src='Index.js'>		</script>
		<script type='text/javascript' src='editor.js'>		</script>

		<style type='text/css'>

		</style>
		<script type='text/javascript'>
			M.ServicesUrl = "http://services.web-manufacture.net";
			M.ModulesUrl = "http://modules.web-manufacture.net";
			M.SystemUrl = "http://system.web-mnanufacture.net";

			CManager = {};
			
			CManager._mixin = {
				InitElem : function(){
					this.Fill();
					var hrow = this.get("#row0");
					hrow.add(".header");
					var cells = hrow.all(".cell");
					for (var i = 0; i < cells.length; i++){
						cells[i].textContent = i + 1;	
					}
					var cells = this.all(".cell[col='0']");
					for (var i = 1; i < cells.length; i++){
						cells[i].textContent = i;	
						cells[i].add(".gutter");
					}
					this.emit("init");
				},

				Fill : function(){
					this.all(".cell").del();
					for (var i = 0; i < this.Rows + 1; i++){
						var row = this.CreateRow(i);
					}
				},

				CreateRow: function(rnum){
					var row = this.IDiv.div(".row");
					row.id = "row" + rnum;
					for (var i = 0; i < this.Cols + 1; i++){
						row.add(this._initCell(i, rnum));
					}
					return row;
				},

				_initCell: function(col, row){
					var cell = DOM.div(".cell", "&nbsp;");
					cell.id = "cell" + row + "_" + col;
					cell.set("@col", col);
					cell.set("@row", row);
					cell.row = row;
					cell.col = col;
					cell.value = 0;
					var table = this;
					cell.onclick = function(event){
						table._onCellClick.call(this, event, table);
						table.emit("cellClick", this);
					};		
					cell.onmouseenter = function(event){
						table._onCellEnter.call(this, event, table);
					};		
					return cell;
				},

				_onCellClick : function(event, table){
					if (this.col <= 0){
						table.emit("gutter_click", this);
						return;
					}
					if (this.row <= 0){
						table.emit("header_click", this);
						return;
					}
					WS.ToggleClass(this,"selected");	
					if (this.is(".selected")){
						table.emit("cell_selected", this);
					}
					else{
						table.emit("cell_unselected", this);
					}
				},


				_onCellEnter : function(event, table){
					if (this.col <= 0 || this.row <= 0) return;
					var hcol = table.get(".row.header .cell[col='" + this.col + "']"); 
					if (hcol){
						table.all(".row.header .cell.current").del(".current");	
						hcol.add(".current");
					}
					if (event.buttons == 1){
						WS.ToggleClass(this, "selected");
						if (this.is(".selected")){
							table.emit("cell_selected", this);
						}
						else{
							table.emit("cell_unselected", this);
						}
					}
				},
			};
			
			CManager.Init = function(table, options){
				Extend(table, Channel.prototype);	
				Extend(table, CManager._mixin);
				Channel.prototype.constructor.call(table);

				table.Cols = parseInt(table.get("@columns"));
				table.Rows = parseInt(table.get("@rows"));
				table.CellSize = parseInt(table.get("@cellsize"));

				if (options && options.cols){
					table.Cols = options.cols;
				}
				if (options && options.rows){
					table.Rows = options.rows;
				}
				if (options && options.width){
					table.CellSize = options.width;
				}

				table.IDiv = table.div(".internal");
				var isize = ((table.CellSize) * (table.Cols + 1));
				table.IDiv.set("@style", "width : " + isize + "px;");
				table.add(".initialized");
				for (var item in table){
					if (item.indexOf("on") == 0 && typeof(table[item]) == 'function'){
						table.on(item.replace("on", '').toLowerCase(), table[item]);
					}
				}
				table.InitElem();
				return table;
			};

			WS.DOMload(function(){
				CManager.Init(MainManager);
				CManager.Init(ChannelManager);
				/*socket = new WebSocket("ws://localhost:5000");
				socket.onopen = (function(s){
					console.log("connected");
				});
				socket.onmessage = function(m){
					var data = JSON.parse(m.data);
					if (typeof data == 'object'){

					}
				};*/		
			});

			function onCell_Selected(cell){
				cell.value = 255;
				programText.textContent = "Cell: " + cell.row + " " + cell.col + " " + cell.value;
			}

			function onCell_UnSelected(cell){
				cell.value = 0;
				programText.textContent = "Cell: " + cell.row + " " + cell.col + " " + cell.value;
			}


		</script>
	</head>
	<body class="">
		<include url='http://services.web-manufacture.net/UI/Toolbars.htm'></include>
		<include url='http://services.web-manufacture.net/UI/UiUtils.htm'></include>
		<include url='http://services.web-manufacture.net/UI/Win.htm'></include>
		<include url='http://services.web-manufacture.net/UI/HtmlElements.htm'></include>

		<div id="UiSettingsWindow" class='window invisible' title='Настройки'>
			<div class='current-port'>
				Текущий порт: <input type='text' id='CurrentPort' class='hintable-box'/>	
			</div>
			<div id='AvailablePorts'>

			</div>
		</div>
		<div id='HeaderBar' class='toolbar'>
			<div class='menuitem resume' icon='http://cdn1.iconfinder.com/data/icons/nuove/32x32/actions/player_play.png' onclick="CNC.ProgCommand('resume');">
				Start</div>			
			<div class='menuitem stop' icon='http://cdn5.iconfinder.com/data/icons/48_px_web_icons/48/Signal_stop.png'	onclick="CNC.Command({command:3});">
				Stop</div>
			<div class='menuitem pause' icon='http://cdn1.iconfinder.com/data/icons/humano2/48x48/actions/gtk-media-pause.png' onclick="CNC.ProgCommand('pause');">
				Pause</div>			
			<div class='separator'>
			</div>			
			<div class='menuitem pin' icon='https://cdn1.iconfinder.com/data/icons/oxygen/48x48/actions/note2.png' onclick="PointsWin.FixPoint();">
				Fix point</div>
			<div class='menuitem' icon='http://cdn2.iconfinder.com/data/icons/humano2/48x48/actions/mail-reply-all.png' onclick="MovingWindow.Show();">
				Moving</div>			
			<div class='menuitem' icon='http://cdn2.iconfinder.com/data/icons/gnomeicontheme/32x32/actions/redhat-home.png' onclick="CNC.QuickCommand('Z 0 600');CNC.QuickCommand('G 5000 5000 0');CNC.QuickCommand('G 0 0 0');">
				Park</div>
			<div class='menuitem' icon='http://cdn2.iconfinder.com/data/icons/gnomeicontheme/32x32/actions/redhat-home.png' onclick="CNC.Rebase(0, 0, 0);">
				Base
			</div>
			<div class='separator'>
			</div>
			<div class='menuitem' icon='http://cdn1.iconfinder.com/data/icons/Vista-Inspirate_1.0/48x48/apps/advancedsettings.png' onclick="RoboUI.ShowSettings();">
				Settings
			</div>
		</div>
		<div id='ContentPanel'>
			<div id='StatusBar'>
				Порт: 
				<div class='sbar-elem port-elem'>
					<span id='PortName'></span>
				</div>
				<div class='sbar-elem command line program-state' style='font-size: 20px; color: gray'>
					(<span id='currentLine'></span>)
				</div>
				<div class='sbar-elem last-command program-state'>
					<span id='currentCommand'></span>
				</div>
			</div>
			
			<div id="MainManager" class='cells-manager' cellsize='10' rows='10' columns='300'>

			</div>
			<div id="ChannelManager" class='cells-manager' cellsize='5' rows='32' columns='300'>

			</div>
		</div>
	</body>
</html>

