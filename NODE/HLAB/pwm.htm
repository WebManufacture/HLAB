<!DOCTYPE html>
<html>
	<head>
		<title>RoboMind control</title>
		<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
		<link type='text/css' rel='stylesheet' href="http://services.web-manufacture.net/Styles/System.default.css" />
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.5?join=true"></script>

		<script src="/socket.io/socket.io.js"></script>
		<script src="http://hlab.web-manufacture.net/Modules/UartClient.js"></script>

		<style type='text/css'>
			.line div{
				display: inline-block;
				padding-left: 10px;
			}
			.color-btn {
				background-position: center center;
				background-repeat: no-repeat;
				border: 1px solid #C0C0C0;
				border-radius: 10px;
				cursor: pointer;
				display: inline-block;
				font-size: 10px;
				height: 50px;
				margin: 2px;
				position: relative;
				text-align: center;
				vertical-align: top;
				width: 50px;
			}
			.color-btn:hover {
				border: solid 2px red;
			}

		</style>
		<script type='text/javascript'>
			M.ServicesUrl = "http://services.web-manufacture.net";
			M.ModulesUrl = "http://modules.web-manufacture.net";
			M.SystemUrl = "http://system.web-mnanufacture.net";


			WS.DOMload(function(){
				//device = new UartManager("ws://el-table:5000", "device");
				device = new UartManager("ws://localhost:5000", "device");
				Channels.on("device.mirrored", function(data){
					DeviceLog.div(".line.info.output", data);
				});
				Channels.on("device.received", function(data){
					var pack = parsePacket(data);
					if (pack){
						if (pack.isSettings){
							var log = DeviceLog.div(".line.device-settings", "Device settings   Divider: ");
							log.div('.division', pack.division);
							log.div('', " Counter: ");
							log.div('.timer', pack.timer);
						}
					}
					else{
						DeviceLog.div(".line.info.input", data);
					}
				});
			});

			function SettingsData(data){
				this.isSettings = true;
				this.command = data[0];
				this.address = getInt(data, 1);
				this.division = data[3];				
				this.low = getLong(data, 4);
				this.high = getLong(data, 8);
				this.timer = (this.high << 8) + this.low;
			}

			function PwmData(data){
				this.command = data[0];
				this.address = getInt(data, 1);
				this.port = data[3];
				this.low = getLong(data, 4);
				this.high = getLong(data, 8);
			}

			function CheckSettings(){
				Channels.emit("device.send", [01]);
			};

			function parsePacket(data){
				if (!data || data.length != 12) return null;
				if (data[0] == 0 || data[0] == 1)
				{
					return new SettingsData(data);
				}
				else
				{
					return new PwmData(data);
				}
			}

			function getInt(data, index){
				return (data[index] << 8) + data[index+1];	
			}

			function getLong(data, index){
				return (data[index] << 24) + (data[index + 1] << 16) + (data[index + 2] << 8) + data[index+3];	
			}

			function getLowInt(data){
				return data & 255;	
			}

			function getHighInt(data, index){
				return (data >> 8) & 255;
			}

			function SendInfo(info){
				if (info && info.length > 0){
					var data = info.split(' ');
				}
			}

			function Send(obj){
				var arr = [];
				if (obj){
					obj.command = parseInt(obj.command);
					arr.push(obj.command);
					if (!obj.address) obj.address = 0;
					obj.address = parseInt(obj.address);
					arr.push(getHighInt(obj.address));
					arr.push(getLowInt(obj.address));
					obj.port = parseInt(obj.port);
					arr.push(obj.port);

					if (!obj.low) obj.low = 0;
					obj.low = parseInt(obj.low);
					arr[4] = (obj.low >> 24) & 255;
					arr[5] = (obj.low >> 16) & 255;
					arr[6] = (obj.low >> 8) & 255;
					arr[7] = (obj.low) & 255;

					if (!obj.high) obj.high = 0;
					obj.high = parseInt(obj.high);
					arr[8] = (obj.high >> 24) & 255;
					arr[9] = (obj.high >> 16) & 255;
					arr[10] = (obj.high >> 8) & 255;
					arr[11] = (obj.high) & 255;
					for (var i = 0; i < arr.length; i++){
						arr[i] = parseInt(arr[i]);
						if (isNaN(arr[i])){
							throw "ERROR VALUE " + arr;
						}
					}
					Channels.emit("device.send", arr);
					return arr;
				}
				return;
			}

			function onCell_Selected(cell){
				cell.value = 255;
				programText.textContent = "Cell: " + cell.row + " " + cell.col + " " + cell.value;
			}

			function onCell_UnSelected(cell){
				cell.value = 0;
				programText.textContent = "Cell: " + cell.row + " " + cell.col + " " + cell.value;
			}

			function ShowSettings(){
				Channels.once("device.received", function(data){
					var settings = parsePacket(data);
					if (settings && settings.isSettings){
						dsvDivider.value = settings.division;
						dsvTimerValue.value = settings.timer;
						DeviceSettingsWindow.Show();
					}});
				CheckSettings();
			}	

			function SendJSON(value){
				Send(JSON.parse(value));
			}	


			function SaveSettings(){
				Send({command : 2, port : dsvDivider.value, low : dsvTimerValue.value});
				DeviceSettingsWindow.Hide();
			}	

			function SetPort(port, value1, value2){
				Send({command : 5, port : port, low : value1, high : value2});
			}

			function SetPwm(port, value){
				SetPort(port, 100 - value, value);
			}

			function SetColor1(r, g, b){
				SetPwm(17, b);
				SetPwm(18, r);
				SetPwm(19, g);
			}

			function SetColor2(r, g, b){
				SetPwm(2, b);
				SetPwm(1, r);
				SetPwm(0, g);
			}

		</script>
	</head>
	<body class="">
		<include url='http://services.web-manufacture.net/UI/Toolbars.htm'></include>
		<include url='http://services.web-manufacture.net/UI/UiUtils.htm'></include>
		<include url='http://services.web-manufacture.net/UI/Win.htm'></include>
		<include url='http://services.web-manufacture.net/UI/HtmlElements.htm'></include>
		<include url='http://services.web-manufacture.net/UI/Widgets.htm'></include>
		<include url='UI/Device.htm'></include>
		<div id="DeviceSettingsWindow" class='window invisible' title='Настройки'>
			<div class='field'>
				<span>Делитель</span>
				<input type='number' id='dsvDivider'/>

			</div>
			<div class='field'>
				<span>Значение</span>
				<input type='number' id='dsvTimerValue'/>
			</div>
			<div class='field'>
				<span>BRR2</span>
				<input type='number' style='width:50px' id='dsvBRR2'/>
				<span>BRR1</span>
				<input type='number' style='width:50px' id='dsvBRR1'/>
			</div>
			<div class='btn-ira save' onclick="SaveSettings();">
				Save
			</div>
		</div>
		<div class='header-bar'>
			<div id='DeviceWidget' class='device-widget ui-widget'>

			</div>
			<div id='ControlBar' class='toolbar invisible' style='width:300px; float: left;'>
				<div class='menuitem resume' icon='http://cdn1.iconfinder.com/data/icons/nuove/32x32/actions/player_play.png' onclick="CNC.ProgCommand('resume');">
				</div>			
				<div class='menuitem stop' icon='http://cdn5.iconfinder.com/data/icons/48_px_web_icons/48/Signal_stop.png'	onclick="CNC.Command({command:3});">
				</div>
				<div class='menuitem pause' icon='http://cdn1.iconfinder.com/data/icons/humano2/48x48/actions/gtk-media-pause.png' onclick="CNC.ProgCommand('pause');">
				</div>			
				<div class='separator'>
				</div>	
				<div class='separator'>
				</div>
				<div class='menuitem' icon='http://cdn1.iconfinder.com/data/icons/Vista-Inspirate_1.0/48x48/apps/advancedsettings.png' onclick="ShowSettings();">

				</div>
			</div>
		</div>
		<div class='clear'></div>
		<div id='SendPanel' class='invisible'>
			<input type='text' style='width:500px' id='DataToSendBox'/>
			<div class='btn-ira ok' onclick="SendJSON(DataToSendBox.value);">
				Send
			</div>
		</div>
		<div id='ColorButtons'>
			<div class='color-btn' style='background-color: #FFFF00;' onclick="SetColor1(50, 50, 0);">

			</div>
			<div class='color-btn' style='background-color: #800000;' onclick="SetColor1(50, 00, 0);">

			</div>
			<div class='color-btn' style='background-color: green;' onclick="SetColor1(0, 50, 0);">

			</div>
			<div class='color-btn' style='background-color: blue;' onclick="SetColor1(0, 0, 50);">

			</div>
			<div class='color-btn' onclick="SetColor1();">

			</div>

		</div>
		<div id='DeviceLog'>

		</div>
	</body>
</html>

